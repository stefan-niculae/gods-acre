// Generated by CoffeeScript 1.10.0
(function() {
  var $tableWrapper, Encashment, Encashments, addColumnFiltering, addRowButtons, addSortedIndicator, alignedIntegerCell, bootstrapColumns, clientSideFilter, colType, columnWidths, columns, cursorAtEndEditor, encashments, grid, highlightColumn, insertBlankRow, printError, repositionRow, setClearSortingOnSearch, setColumnWidths, setHighlightOnSort, setInitialSortedHighlight, setSearchEscClear, setSearchIcons, setSearchSize, stringCell, sum, tableWrapper,
    slice = [].slice;

  tableWrapper = "example-table";

  columnWidths = [1, 1, 1, 1, 2, 3, 3];

  sum = function(arr) {
    return arr.reduce(function(prev, curr) {
      return prev + curr;
    });
  };

  printError = function() {
    var args, format;
    format = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return console.error(s.sprintf.apply(s, [format].concat(slice.call(args))));
  };

  Encashment = Backbone.Model.extend({});

  Encashments = Backbone.Collection.extend({
    model: Encashment,
    url: 'encashments.json'
  });

  encashments = new Encashments();

  cursorAtEndEditor = Backgrid.InputCellEditor.extend({
    postRender: function() {
      var val;
      val = this.$el.val();
      return this.$el.focus().val('').val(val);
    }
  });

  alignedIntegerCell = Backgrid.IntegerCell.extend({
    className: 'aligned-integer-cell',
    editor: cursorAtEndEditor
  });

  stringCell = Backgrid.StringCell.extend({
    editor: cursorAtEndEditor
  });

  columns = [
    {
      name: '',
      cell: 'select-row',
      headerCell: 'select-all',
      editable: false,
      sortable: false
    }, {
      name: 'id',
      label: '#',
      editable: false,
      cell: alignedIntegerCell.extend({
        orderSeparator: '',
        className: 'id-cell'
      }),
      sortType: 'toggle',
      direction: 'ascending'
    }, {
      name: 'parcel',
      label: 'P',
      cell: stringCell,
      sortType: 'toggle'
    }, {
      name: 'row',
      label: 'R',
      cell: stringCell,
      sortType: 'toggle'
    }, {
      name: 'column',
      label: 'C',
      cell: stringCell,
      sortType: 'toggle'
    }, {
      name: 'year',
      label: 'Year',
      cell: alignedIntegerCell.extend({
        orderSeparator: '',
        className: 'year-cell'
      }),
      sortType: 'toggle'
    }, {
      name: 'value',
      label: 'Value',
      cell: alignedIntegerCell,
      sortType: 'toggle'
    }, {
      name: 'receipt',
      label: 'Receipt',
      cell: stringCell,
      sortType: 'toggle'
    }, {
      name: 'editing-buttons',
      label: '',
      formatter: _.extend({}, Backgrid.CellFormatter.prototype, {
        fromRaw: function() {
          return "<button type='button' class='btn btn-info duplicate'><i class='fa fa-files-o'></i></button>" + "<button type='button' class='btn btn-danger  delete'><i class='fa fa-trash-o'></i></button>";
        }
      }),
      cell: Backgrid.HtmlCell.extend({
        className: 'editing-buttons-cell'
      }),
      sortable: false,
      editable: false
    }
  ];

  grid = new Backgrid.Grid({
    columns: columns,
    collection: encashments,
    className: 'backgrid table table-striped table-bordered table-condense table-hover',
    emptyText: 'No data'
  });

  $tableWrapper = $('#' + tableWrapper);

  $tableWrapper.append(grid.render().el);

  clientSideFilter = new Backgrid.Extension.ClientSideFilter({
    collection: encashments,
    placeholder: 'Search',
    fields: ['id', 'parcel', 'row', 'column', 'year', 'value', 'receipt'],
    wait: 150
  });

  $tableWrapper.prepend(clientSideFilter.render().el);

  encashments.fetch({
    reset: true,
    success: function() {
      insertBlankRow(grid);
      setColumnWidths(tableWrapper, columnWidths, colType);
      setInitialSortedHighlight(tableWrapper, columns, 'id');
      setHighlightOnSort(tableWrapper);
      setClearSortingOnSearch(tableWrapper);
      addSortedIndicator(tableWrapper);
      setSearchIcons(tableWrapper);
      setSearchSize(tableWrapper);
      setSearchEscClear(tableWrapper);
      return addColumnFiltering(tableWrapper);
    },
    error: function(collection, response) {
      return printError('Fetching failed. Error response: %s.', response);
    }
  });

  bootstrapColumns = 12;

  colType = 'lg';

  setColumnWidths = function(tableWrapper, widths, colType) {
    var adjustedWidths, header, headerWidthPair, headers, i, j, len, len1, msg, ref, results, w, width;
    if (sum(widths) !== bootstrapColumns) {
      msg = 'Total number of columns (%d) differs from total number of bootstrap columns (%d).';
      printError(msg, sum(widths, bootstrapColumns));
    }
    adjustedWidths = [0];
    for (i = 0, len = widths.length; i < len; i++) {
      w = widths[i];
      adjustedWidths.push(w);
    }
    adjustedWidths.push(0);
    headers = $('#' + tableWrapper + ' th');
    if (headers.length - 2 !== widths.length) {
      msg = 'The number of columns (%d) differs from the number of headers (%d).';
      printError(msg, widths.length, headers.length - 2);
    }
    ref = _.zip(headers, adjustedWidths);
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      headerWidthPair = ref[j];
      header = $(headerWidthPair[0]);
      width = headerWidthPair[1];
      results.push(header.addClass(s.sprintf('col-%s-%d', colType, width)));
    }
    return results;
  };

  insertBlankRow = function(grid) {
    var blankRow, row;
    blankRow = {
      id: -1,
      parcel: '',
      row: '',
      column: '',
      year: -1,
      value: -1,
      receipt: ''
    };
    grid.insertRow(blankRow);
    row = repositionRow(grid, -1, 0);
    row.addClass('blank-row');
    return row.find('td').slice(1, -1).each(function(index, elem) {
      var $elem;
      $elem = $(elem);
      return $elem.text($elem.hasClass('id-cell') ? '-' : '');
    });
  };

  repositionRow = function(grid, oldIndex, newIndex) {
    var aboveWhat, n, rows, toMove;
    rows = grid.$el.find('tbody tr');
    n = rows.length;
    if (oldIndex < 0) {
      oldIndex = n + oldIndex;
    }
    if (newIndex < 0) {
      newIndex = n + newIndex;
    }
    toMove = rows.eq(oldIndex);
    aboveWhat = rows.eq(newIndex);
    return toMove.insertBefore(aboveWhat);
  };

  highlightColumn = function(tableWrapper, columnIndex) {
    return $('#' + tableWrapper + ' td:nth-child(' + columnIndex + ')').addClass('sorted-col');
  };

  setInitialSortedHighlight = function(tableWrapper, columns, idName) {
    var index, names;
    names = _.pluck(columns, 'name');
    index = _.indexOf(names, idName) + 1;
    return highlightColumn(tableWrapper, index);
  };

  setHighlightOnSort = function(tableWrapper) {
    var headers;
    headers = $('#' + tableWrapper + ' th');
    return headers.click(function(event) {
      var columnIndex, target;
      target = $(event.currentTarget);
      if (target.hasClass('ascending') || target.hasClass('descending')) {
        columnIndex = headers.index(target) + 1;
        return highlightColumn(tableWrapper, columnIndex);
      }
    });
  };

  setClearSortingOnSearch = function(tableWrapper) {
    var clearHighlight;
    clearHighlight = function() {
      $('#' + tableWrapper + ' th.ascending').removeClass('ascending');
      return $('#' + tableWrapper + ' th.descending').removeClass('descending');
    };
    $('#' + tableWrapper + ' input[type="search"]').keypress(function() {
      return clearHighlight();
    });
    return $('#' + tableWrapper + ' a.clear').keypress(function() {
      clearHighlight();
      return $('#' + tableWrapper + ' th .sorted-indicator').hide();
    });
  };

  addSortedIndicator = function(tableWrapper) {
    var selector;
    selector = '#' + tableWrapper + ' th';
    $(selector).prepend('<div>');
    return $(selector + ' > div').addClass('sorted-indicator').html("<i class='fa fa-sort-amount-asc'></i>");
  };

  setSearchIcons = function(tableWrapper) {
    return $('#' + tableWrapper + ' .form-search').append("<i class='fa fa-search'></i>").find('.clear').html("<i class='fa fa-times'></i>");
  };

  setSearchSize = function(tableWrapper) {
    return $('#' + tableWrapper + ' .form-search').wrap("<div class='row search-and-filter-row'>").wrap("<div class='col-xs-10 search-cols'>");
  };

  addColumnFiltering = function(tableWrapper) {
    return $("<div class='col-xs-offset-1 col-xs-1 filter-cols'>").html("<button type='button' class='btn btn-primary'><i class='fa fa-filter fa-lg'></i></button>").insertAfter('#' + tableWrapper + ' .search-cols');
  };

  setSearchEscClear = function(tableWrapper) {
    var input;
    input = $('#' + tableWrapper + ' .form-search input');
    return input.keypress(function(event) {
      var code;
      code = event.keyCode || event.which;
      if (code === 27) {
        return input.val('');
      }
    });
  };

  addRowButtons = function(tableWrapper) {
    return $('#' + tableWrapper + ' tr .editing-buttons-cell').append("<button type='button' class='btn btn-info duplicate'><i class='fa fa-files-o'></i></button>").append("<button type='button' class='btn btn-danger delete'><i class='fa fa-trash-o'></i></button>");
  };

}).call(this);

//# sourceMappingURL=test.js.map
